#!/usr/bin/env bash
# created by TungNQ

version="1.1.16"

if [ "$1" == "__test_cmd" ]; then
    echo "ok"
    exit 1
fi

if [ "$1" == "-v" ] || [ "$1" == "--version" ]; then
    echo $version
    exit 1
fi

# global vars
resource_path="$(brew --cellar xcode-ci)/$version"
# resource_path=$(dirname "$0")
helper_path="${resource_path}/helper"
deploy_path="$(pwd)/.ci"
hooks_path="${deploy_path}/hooks"
export_config_name="export_config.plist"
export_config_path="${deploy_path}/${export_config_name}"
deploy_config_name="deploy_config.json"
deploy_config_path="${deploy_path}/${deploy_config_name}"

# setup for echo
b=$(tput bold)
n=$(tput sgr0)

# ========== INIT ==========
if [ "$1" == "init" ]; then
    # get resource
    if [ ! -d "${resource_path}" ]; then
        echo "=> Resource not found, please 'brew reinstall xcode-ci'"
        exit 1
    fi

    deploy_path="./.ci"
    if [ -d "${deploy_path}" ]; then
        if [ "$2" != "-f" ] && [ "$2" != "--force" ]; then
            echo "=> This project is initialized, please 'xcode-ci init -f' to re-init"
            exit 1
        fi
    fi

    # Create deploy path...
    rm -rf ${deploy_path}
    mkdir ${deploy_path}

    # ... deploy_config & export_config files
    cp -R ${resource_path}/config/${export_config_name} ${deploy_path}/${export_config_name}
    cp -R ${resource_path}/config/${deploy_config_name} ${deploy_path}/${deploy_config_name}

    # ... hooks dir and files inside
    mkdir ${deploy_path}/hooks
    cp -R ${resource_path}/hooks/ ${deploy_path}/hooks/
    
    exit 1
fi

# check this project is initialized?
if [ ! -e "${deploy_config_path}" ]; then
    echo "=> ${deploy_config_name} not found at ${deploy_path}"
    echo "=> Need initialize first: xcode-ci init [-f]"
    exit 1
fi

# check input argument
# get extend args
ci_cmd_args=";$1"
declare -i arg_num=0
for var in "$@"
do
    arg_num=$(( arg_num + 1 ))
    if (( arg_num > 1 )); then # already keep $1
        ci_cmd_args+=";${var}"
    fi
done

# define processes
process_path="${deploy_path}/process.json"
touch ${process_path}
python3 ${helper_path}/py_jsoncreate.py -v "${ci_cmd_args}" -p ${process_path}
process_value_cmd="python3 ${helper_path}/py_jsonvalue.py -p ${process_path} "

destroy()
{
    rm -rf ${process_path}
}

# check type of build
project_full_name=$(jq ".project_name" ${deploy_config_path} | tr -d \")
project_path=$(jq ".project_path" ${deploy_config_path} | tr -d \")
project_file_path="${project_path}/${project_full_name}"

is_build=$(${process_value_cmd} -k build/run)
is_test=$(${process_value_cmd} -k test/run)
if [ "${is_build}" == "1" ] || [ "${is_test}" == "1" ]; then
    echo "${b}========== BUILD ==========${n}"

    # get the build path
    build_path=$(jq ".build_path" ${deploy_config_path} | tr -d \")

    # create dir if needed
    if [ ! -d "${build_path}" ]; then
        mkdir ${build_path}
    fi

    # Run Pre Build/Test job
    if [ "${is_build}" == "1" ]; then
        sh ${hooks_path}/pre_build.sh ${deploy_config_path} ${build_path}
    fi
    if [ "${is_test}" == "1" ]; then
        sh ${hooks_path}/pre_test.sh ${deploy_config_path} ${build_path}
    fi

    # Run Build/Test job
    build_cmd="sh ${helper_path}/xcode-ci-build.sh ${project_file_path}"
    ${build_cmd}

    # Get derived data path
    derived_build_dir=$(python3 ${helper_path}/py_file_get_value.py -p .ci/build_dirs.log -k BUILD_DIR)
    rm -rf .ci/build_dirs.log

    # Run Post Build/Test job
    if [ "${is_build}" == "1" ]; then
        sh ${hooks_path}/post_build.sh ${deploy_config_path} ${build_path} ${derived_build_dir}
    fi
    if [ "${is_test}" == "1" ]; then
        sh ${hooks_path}/post_test.sh ${deploy_config_path} ${build_path} ${derived_build_dir}
    fi
fi

archive_scheme=$(jq ".archive_scheme" ${deploy_config_path} | tr -d \")
archive_path=$(jq ".archive_path" ${deploy_config_path} | tr -d \")
archive_file_path="${archive_path}/${archive_scheme}.xcarchive"

is_archive=$(${process_value_cmd} -k archive/run)
if [ "${is_archive}" == "1" ]; then
    echo "${b}========== ARCHIVE ==========${n}"
    # create dir if needed
    if [ ! -d "${archive_path}" ]; then
        mkdir ${archive_path}
    fi

    # Run Pre Archive job
    sh ${hooks_path}/pre_archive.sh ${deploy_config_path} ${archive_path}

    # Run Archive job
    archive_cmd="sh ${helper_path}/xcode-ci-archive.sh ${project_file_path} ${archive_path} ${archive_scheme}"
    ${archive_cmd}

    # check archive status: failed => exit
    if [ ! -e "${archive_file_path}" ]; then
        rm -rf ${archive_path}
        destroy
        exit 1
    fi

    # Run Post Archive job
    sh ${hooks_path}/post_archive.sh ${deploy_config_path} ${archive_path} ${archive_scheme}.xcarchive
fi

is_export=$(${process_value_cmd} -k export/run)
if [ "${is_export}" == "1" ]; then
    echo "${b}========== EXPORT ==========${n}"
    # check this project is initialized?
    if [ ! -e "${export_config_path}" ]; then
        echo "=> ${export_config_name} not found at ${deploy_path}"
        echo "=> Need initialize first: xcode-ci init [-f]"
        destroy
        exit 1
    fi
    if [ ! -e "${archive_file_path}" ]; then
        echo "=> ${archive_scheme}.xcarchive not found"
        echo "=> Need archive first: xcode-ci -r 'a'"
        destroy
        exit 1
    fi

    # create export path
    export_id=$(uuidgen)
    export_path="${archive_path}/Export_${export_id}"
    mkdir ${export_path}

    # Run Pre Export job
    sh ${hooks_path}/pre_export.sh ${deploy_config_path} ${export_path}

    # Run Export job
    echo "=> Exporting... ${archive_scheme}"
    export_cmd="sh ${helper_path}/xcode-ci-export.sh ${export_path} ${archive_file_path}"
    ${export_cmd}

    # check export status: failed => exit
    # echo "Export path is: $export_path"
    ipa_file_name=$(find $export_path -type f -name "*.ipa" -print | head -n 1 | rev | cut -d'/' -f 1 | rev)
    if [ "$ipa_file_name" == "" ]; then
        destroy
        exit 1
    fi

    # Run Post Export job
    # echo "Exported file is: $ipa_file_name"
    sh ${hooks_path}/post_export.sh ${deploy_config_path} ${export_path} "${ipa_file_name}"
fi

destroy